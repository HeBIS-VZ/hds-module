<?php
/*
 * This file is a part of HDS (HeBIS Discovery System). HDS is an
 * extension of the open source library search engine VuFind, that
 * allows users to search and browse beyond resources. More
 * Information about VuFind you will find on http://www.vufind.org
 *
 * Copyright (C) 2017
 * HeBIS Verbundzentrale des HeBIS-Verbundes
 * Goethe-Universität Frankfurt / Goethe University of Frankfurt
 * http://www.hebis.de
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

namespace Hebis\Csl\Model\Layout;


interface CslRecord
{

    /**
     * author
     * @return CslName
     */
    public function getAuthor();

    /**
     * editor of the collection holding the item (e.g. the series editor for a book)
     * @return CslName
     */
    public function getCollectionEditor();

    /**
     * composer (e.g. of a musical score)
     * @return CslName
     */
    public function getComposer();

    /**
     * author of the container holding the item (e.g. the book author for a book chapter)
     * @return CslName
     */
    public function getContainerAuthor();

    /**
     * director (e.g. of a film)
     * @return CslName
     */
    public function getDirector();

    /**
     * editor
     * @return CslName
     */
    public function getEditor();

    /**
     * managing editor (“Directeur de la Publication” in French)
     * @return CslName
     */
    public function getEditorialDirector();

    /**
     * illustrator (e.g. of a children’s book)
     * @return CslName
     */
    public function getIllustrator();

    /**
     * interviewer (e.g. of an interview)
     * @return CslName
     */
    public function getInterviewer();

    /**
     * recipient (e.g. of a letter)
     * @return CslName
     */
    public function getRecipient();

    /**
     * author of the item reviewed by the current item
     * @return CslName
     */
    public function getReviewedAuthor();

    /**
     * translator
     * @return CslName
     */
    public function getTranslator();

    /**
     * date the item has been accessed
     * @return CslDate
     */
    public function getAccessed();

    /**
     * date the related event took place
     * @return CslDate
     */
    public function getEventDate();

    /**
     * date the item was issued/published
     * @return CslDate
     */
    public function getIssued();

    /**
     * (issue) date of the original version
     * @return CslDate
     */
    public function getOriginalDate();

    /**
     * date the item (e.g. a manuscript) has been submitted for publication
     * @return CslDate
     */
    public function getSubmitted();


    /**
     * abstract of the item (e.g. the abstract of a journal article)
     * @return string
     */
    public function getAbstract();

    /**
     * reader’s notes about the item content
     * @return string
     */
    public function getAnnote();

    /**
     * archive storing the item
     * @return string
     */
    public function getArchive();

    /**
     * storage location within an archive (e.g. a box and folder number)
     * @return string
     */
    public function getArchive_location();

    /**
     * geographic location of the archive
     * @return string
     */
    public function getArchive_place();

    /**
     * issuing or judicial authority (e.g. “USPTO” for a patent, “Fairfax Circuit Court” for a legal case)
     * @return string
     */
    public function getAuthority();

    /**
     * call number (to locate the item in a library)
     * @return string
     */
    public function getCallNumber();

    /**
     * label identifying the item in in-text citations of label styles (e.g. “Ferr78”). May be assigned by the CSL
     * processor based on item metadata.
     * @return string
     */
    public function getCitationLabel();

    /**
     * index (starting at 1) of the cited reference in the bibliography (generated by the CSL processor)
     * @return string
     */
    public function getCitationNumber();

    /**
     * title of the collection holding the item (e.g. the series title for a book)
     * @return string
     */
    public function getCollectionTitle();

    /**
     * title of the container holding the item (e.g. the book title for a book chapter, the journal title for a
     * journal article)
     * @return string
     */
    public function getContainerTitle();

    /**
     * short/abbreviated form of “container-title” (also accessible through the “short” form of the “container-title”
     * variable)
     * @return string
     */
    public function getContainerTitleShort();

    /**
     * physical (e.g. size) or temporal (e.g. running time) dimensions of the item
     * @return string
     */
    public function getDimensions();

    /**
     * Digital Object Identifier (e.g. “10.1128/AEM.02591-07”)
     * @return string
     */
    public function getDOI();

    /**
     * name of the related event (e.g. the conference name when citing a conference paper)
     * @return string
     */
    public function getEvent();

    /**
     * geographic location of the related event (e.g. “Amsterdam, the Netherlands”)
     * @return string
     */
    public function getEventPlace();

    /**
     * class, type or genre of the item (e.g. “adventure” for an adventure movie, “PhD dissertation” for a PhD thesis)
     * @return string
     */
    public function getGenre();

    /**
     * International Standard Book Number
     * @return string
     */
    public function getISBN();

    /**
     * International Standard Serial Number
     * @return string
     */
    public function getISSN();

    /**
     * geographic scope of relevance (e.g. “US” for a US patent)
     * @return string
     */
    public function getJurisdiction();

    /**
     * keyword(s) or tag(s) attached to the item
     * @return string
     */
    public function getKeyword();

    /**
     * a cite-specific pinpointer within the item (e.g. a page number within a book, or a volume in a multi-volume
     * work). Must be accompanied in the input data by a label indicating the locator type (see the Locators term list
     * http://docs.citationstyles.org/en/stable/specification.html#locators), which determines which term is rendered
     * by cs:label when the “locator” variable is selected.
     * @return string
     */
    public function getLocator();

    /**
     * medium description (e.g. “CD”, “DVD”, etc.)
     * @return string
     */
    public function getMedium();

    /**
     * (short) inline note giving additional item details (e.g. a concise summary or commentary)
     * @return string
     */
    public function getNote();

    /**
     * original publisher, for items that have been republished by a different publisher
     * @return string
     */
    public function getOriginalPublisher();

    /**
     * geographic location of the original publisher (e.g. “London, UK”)
     * @return string
     */
    public function getOriginalPublisherPlace();

    /**
     * title of the original version (e.g. “Война и мир”, the untranslated Russian title of “War and Peace”)
     * @return string
     */
    public function getOriginalTitle();

    /**
     * range of pages the item (e.g. a journal article) covers in a container (e.g. a journal issue)
     * @return string
     */
    public function getPage();

    /**
     * first page of the range of pages the item (e.g. a journal article) covers in a container (e.g. a journal issue)
     * @return string
     */
    public function getPageFirst();

    /**
     * Publisher
     * @return string
     */
    public function getPublisher();

    /**
     * geographic location of the publisher
     * @return string
     */
    public function getPublisherPlace();

    /**
     * resources related to the procedural history of a legal case
     * @return string
     */
    public function getReferences();

    /**
     * title of the item reviewed by the current item
     * @return string
     */
    public function getReviewedTitle();

    /**
     * scale of e.g. a map
     * @return string
     */
    public function getScale();

    /**
     * container section holding the item (e.g. “politics” for a newspaper article)
     * @return string
     */
    public function getSection();

    /**
     * from whence the item originates (e.g. a library catalog or database)
     * @return string
     */
    public function getSource();

    /**
     * (publication) status of the item (e.g. “forthcoming”)
     * @return string
     */
    public function getStatus();

    /**
     * primary title of the item
     * @return string
     */
    public function getTitle();

    /**
     * short/abbreviated form of “title” (also accessible through the “short” form of the “title” variable)
     * @return string
     */
    public function getTitleShort();

    /**
     * Uniform Resource Locator (e.g. “http://aem.asm.org/cgi/content/full/74/9/2766”)
     * @return string
     */
    public function getURL();

    /**
     * version of the item (e.g. “2.0.9” for a software program)
     * @return string
     */
    public function getVersion();

    /**
     * disambiguating year suffix in author-date styles (e.g. “a” in “Doe, 1999a”)
     * @return string
     */
    public function getYearSuffix();

    /**
     * chapter number
     * @return string
     */
    public function getChapterNumber();

    /**
     * number identifying the collection holding the item (e.g. the series number for a book)
     * @return string
     */
    public function getCollectionNumber();

    /**
     * (container) edition holding the item (e.g. “3” when citing a chapter in the third edition of a book)
     * @return string
     */
    public function getEdition();

    /**
     * (container) issue holding the item (e.g. “5” when citing a journal article from journal volume 2, issue 5)
     * @return string
     */
    public function getIssue();

    /**
     * number identifying the item (e.g. a report number)
     * @return string
     */
    public function getNumber();

    /**
     * total number of pages of the cited item
     * @return string
     */
    public function getNumberOfPages();

    /**
     * total number of volumes, usable for citing multi-volume books and such
     * @return string
     */
    public function getNumberOfVolumes();

    /**
     * (container) volume holding the item (e.g. “2” when citing a chapter from book volume 2)
     * @return string
     */
    public function getVolume();

}
