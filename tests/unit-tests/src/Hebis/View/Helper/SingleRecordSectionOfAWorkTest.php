<?php
/*
 * This file is a part of HDS (HeBIS Discovery System). HDS is an 
 * extension of the open source library search engine VuFind, that 
 * allows users to search and browse beyond resources. More 
 * Information about VuFind you will find on http://www.vufind.org
 * 
 * Copyright (C) 2016 
 * Sebastian Böttger <boettger@hebis.uni-frankfurt.de>
 * HeBIS Verbundzentrale des HeBIS-Verbundes 
 * Goethe-Universität Frankfurt / Goethe University of Frankfurt
 * http://www.hebis.de
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

namespace Hebis\View\Helper;
use Box\Spout\Reader\ODS\RowIterator;
use Box\Spout\Reader\ODS\Sheet;
use Box\Spout\Reader\ODS\SheetIterator;
use Iterator;


/**
 * Class SingleRecordSectionOfAWorkTest
 * @package Hebis\View\Helper
 *
 * @author Sebastian Böttger <boettger@hebis.uni-frankfurt.de>
 */
class SingleRecordSectionOfAWorkTest extends AbstractViewHelperTest
{

    private $testSheetName;

    public function setUp()
    {
        $this->viewHelperClass = "SingleRecordSectionOfAWork";
        $this->testResultField = "";
        $this->testRecordIds = [];

        $this->testSheetName = "Teil";
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test__invoke()
    {
        //parent::test__invoke(); // TODO: Change the autogenerated stub

        /** @var Sheet $sheet */
        foreach ($this->spreadsheetReader->getSheetIterator() as $sheet) {

            if ($sheet->getIndex() === $this->testSheetName) {
                $isRelevantRow = false;
                $relevantRows = [];
                /** @var array $row */
                foreach ($sheet->getRowIterator() as $row) {

                    if (strpos($row[0], "Test Kommentar") !== false) {
                        $isRelevantRow = true;
                        continue;
                    }
                    if ($isRelevantRow) {
                        if (empty($row[0])) {
                            $isRelevantRow = false;
                            break;
                        }
                        $relevantRows[] = array_slice($row, 0, 6);
                    }
                }
                $this->runTests($relevantRows);
            }
        }
    }

    /**
     * Get plugins to register to support view helper being tested
     *
     * @return array
     */
    protected function getPlugins()
    {
        return [];
    }

    /**
     * @param RowIterator $rows
     */
    protected function runTests($rows)
    {
        foreach ($rows as $row) {
            list(
                $comment,
                $ppn,
                $testData,
                $expectedSingleRecordResult,
                $expectedRecordListResult) = array_slice($row, 0, 5);

            $record = $this->getRecordFromIndex($ppn);
            if (empty($record)) {
                if (empty($testData)) {

                    throw new \PHPUnit_Framework_IncompleteTestError('no data found');
                } 
                $record = $this->getRecordFromTestData($testData);
            }

            $actual = $this->viewHelper->__invoke($record);

            $this->assertEquals($expectedSingleRecordResult, $actual, $comment);
            
        }
    }
}